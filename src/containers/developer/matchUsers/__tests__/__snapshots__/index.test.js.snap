// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MatchUsers /> Component Simulating the allSelectedUsers function 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "19lu3j",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "19lu3j",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MatchUsers
      location={
        Object {
          "state": Object {
            "day": "Monday",
            "swap": Array [
              Object {
                "id": 1,
                "role": "developer",
                "taskId": Array [
                  "dsbcsbh",
                ],
                "username": "usman",
              },
            ],
          },
        }
      }
      role="developer"
    >
      <withRouter(Navigationbar)
        role="developer"
      >
        <Navigationbar
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "key": "19lu3j",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "key": "19lu3j",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "key": "19lu3j",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          role="developer"
        >
          <Navbar
            bg="light"
            collapseOnSelect={false}
            expand="lg"
            fluid={true}
            inverse={true}
            variant="light"
          >
            <nav
              className="navbar navbar-expand-lg navbar-light bg-light"
              fluid={true}
              inverse={true}
            >
              <NavbarBrand
                onClick={[Function]}
              >
                <span
                  className="navbar-brand"
                  onClick={[Function]}
                >
                  Employee Management System
                </span>
              </NavbarBrand>
              <NavbarToggle
                aria-controls="basic-navbar-nav"
                label="Toggle navigation"
              >
                <button
                  aria-controls="basic-navbar-nav"
                  aria-label="Toggle navigation"
                  className="navbar-toggler collapsed"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    className="navbar-toggler-icon"
                  />
                </button>
              </NavbarToggle>
              <NavbarCollapse
                id="basic-navbar-nav"
              >
                <Collapse
                  appear={false}
                  dimension="height"
                  getDimensionValue={[Function]}
                  id="basic-navbar-nav"
                  in={false}
                  mountOnEnter={false}
                  timeout={300}
                  unmountOnExit={false}
                >
                  <Transition
                    addEndListener={[Function]}
                    appear={false}
                    aria-expanded={null}
                    enter={true}
                    exit={true}
                    id="basic-navbar-nav"
                    in={false}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={300}
                    unmountOnExit={false}
                  >
                    <div
                      aria-expanded={null}
                      className="navbar-collapse collapse"
                      id="basic-navbar-nav"
                    >
                      <Nav
                        className="mr-auto"
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="mr-auto navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="mr-auto navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <BrowserRouter>
                              <Router
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "createHref": [Function],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "blank",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                              >
                                <Link
                                  data-testid="tasks"
                                  onClick={[Function]}
                                  to="/tasks"
                                >
                                  <LinkAnchor
                                    data-testid="tasks"
                                    href="/tasks"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="tasks"
                                      href="/tasks"
                                      onClick={[Function]}
                                    >
                                      Tasks
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="timings"
                                  onClick={[Function]}
                                  to="/timings"
                                >
                                  <LinkAnchor
                                    data-testid="timings"
                                    href="/timings"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="timings"
                                      href="/timings"
                                      onClick={[Function]}
                                    >
                                      Timings
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="swapshift"
                                  onClick={[Function]}
                                  to="/swapshift"
                                >
                                  <LinkAnchor
                                    data-testid="swapshift"
                                    href="/swapshift"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="swapshift"
                                      href="/swapshift"
                                      onClick={[Function]}
                                    >
                                      Swap Requests
                                    </a>
                                  </LinkAnchor>
                                </Link>
                              </Router>
                            </BrowserRouter>
                          </div>
                        </ForwardRef>
                      </Nav>
                      <Nav
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <Button
                              active={false}
                              data-testid="logout"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                              variant="outline-info"
                            >
                              <button
                                className="btn btn-outline-info"
                                data-testid="logout"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Logout
                              </button>
                            </Button>
                          </div>
                        </ForwardRef>
                      </Nav>
                    </div>
                  </Transition>
                </Collapse>
              </NavbarCollapse>
            </nav>
          </Navbar>
        </Navigationbar>
      </withRouter(Navigationbar)>
      <styled.div>
        <div
          className="sc-AxiKw gA-drMl"
        >
          <styled.h1>
            <h1
              className="sc-AxhCb jQvLNr"
            >
              Swap Shift with following
            </h1>
          </styled.h1>
          <RenderTable
            allSelectedUsers={[Function]}
            list={
              Array [
                Object {
                  "id": 1,
                  "role": "developer",
                  "taskId": Array [
                    "dsbcsbh",
                  ],
                  "username": "usman",
                },
              ]
            }
            submittedSelectedUsers={[Function]}
          >
            <ForwardRef
              bordered={true}
              hover={true}
              striped={true}
            >
              <table
                className="table table-striped table-bordered table-hover"
              >
                <thead>
                  <tr>
                    <td>
                      ID
                    </td>
                    <td>
                      Email
                    </td>
                    <td>
                      Role
                    </td>
                    <td>
                      Task
                    </td>
                    <td>
                      Select
                    </td>
                  </tr>
                </thead>
                <tbody>
                  <RenderRow
                    allSelectedUsers={[Function]}
                    list={
                      Object {
                        "id": 1,
                        "role": "developer",
                        "taskId": Array [
                          "dsbcsbh",
                        ],
                        "username": "usman",
                      }
                    }
                  >
                    <tr>
                      <td />
                      <td />
                      <td>
                        developer
                      </td>
                      <td>
                        Task
                      </td>
                      <td>
                        <FormCheck
                          disabled={false}
                          id="swap"
                          inline={false}
                          isInvalid={false}
                          isValid={false}
                          onChange={[Function]}
                          title=""
                          type="checkbox"
                        >
                          <div
                            className="form-check"
                          >
                            <FormCheckInput
                              as="input"
                              disabled={false}
                              isInvalid={false}
                              isStatic={true}
                              isValid={false}
                              onChange={[Function]}
                              type="checkbox"
                            >
                              <input
                                className="form-check-input position-static"
                                disabled={false}
                                id="swap"
                                onChange={[Function]}
                                type="checkbox"
                              />
                            </FormCheckInput>
                          </div>
                        </FormCheck>
                      </td>
                    </tr>
                  </RenderRow>
                </tbody>
              </table>
            </ForwardRef>
            <FormGroup>
              <div
                className="form-group"
              >
                <Button
                  active={false}
                  data-testid="submitbutton"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                  variant="primary"
                >
                  <button
                    className="btn btn-primary"
                    data-testid="submitbutton"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    Submit
                  </button>
                </Button>
              </div>
            </FormGroup>
          </RenderTable>
        </div>
      </styled.div>
    </MatchUsers>
  </Router>
</MemoryRouter>
`;

exports[`<MatchUsers /> Component mounting the component 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "jk2mhm",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "jk2mhm",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MatchUsers
      location={
        Object {
          "state": Object {
            "day": "Monday",
            "swap": Array [
              Object {
                "id": 1,
                "role": "developer",
                "taskId": Array [
                  "dsbcsbh",
                ],
                "username": "usman",
              },
            ],
          },
        }
      }
      role="developer"
    >
      <withRouter(Navigationbar)
        role="developer"
      >
        <Navigationbar
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "key": "jk2mhm",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "key": "jk2mhm",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "key": "jk2mhm",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          role="developer"
        >
          <Navbar
            bg="light"
            collapseOnSelect={false}
            expand="lg"
            fluid={true}
            inverse={true}
            variant="light"
          >
            <nav
              className="navbar navbar-expand-lg navbar-light bg-light"
              fluid={true}
              inverse={true}
            >
              <NavbarBrand
                onClick={[Function]}
              >
                <span
                  className="navbar-brand"
                  onClick={[Function]}
                >
                  Employee Management System
                </span>
              </NavbarBrand>
              <NavbarToggle
                aria-controls="basic-navbar-nav"
                label="Toggle navigation"
              >
                <button
                  aria-controls="basic-navbar-nav"
                  aria-label="Toggle navigation"
                  className="navbar-toggler collapsed"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    className="navbar-toggler-icon"
                  />
                </button>
              </NavbarToggle>
              <NavbarCollapse
                id="basic-navbar-nav"
              >
                <Collapse
                  appear={false}
                  dimension="height"
                  getDimensionValue={[Function]}
                  id="basic-navbar-nav"
                  in={false}
                  mountOnEnter={false}
                  timeout={300}
                  unmountOnExit={false}
                >
                  <Transition
                    addEndListener={[Function]}
                    appear={false}
                    aria-expanded={null}
                    enter={true}
                    exit={true}
                    id="basic-navbar-nav"
                    in={false}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={300}
                    unmountOnExit={false}
                  >
                    <div
                      aria-expanded={null}
                      className="navbar-collapse collapse"
                      id="basic-navbar-nav"
                    >
                      <Nav
                        className="mr-auto"
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="mr-auto navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="mr-auto navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <BrowserRouter>
                              <Router
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "createHref": [Function],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "blank",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                              >
                                <Link
                                  data-testid="tasks"
                                  onClick={[Function]}
                                  to="/tasks"
                                >
                                  <LinkAnchor
                                    data-testid="tasks"
                                    href="/tasks"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="tasks"
                                      href="/tasks"
                                      onClick={[Function]}
                                    >
                                      Tasks
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="timings"
                                  onClick={[Function]}
                                  to="/timings"
                                >
                                  <LinkAnchor
                                    data-testid="timings"
                                    href="/timings"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="timings"
                                      href="/timings"
                                      onClick={[Function]}
                                    >
                                      Timings
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="swapshift"
                                  onClick={[Function]}
                                  to="/swapshift"
                                >
                                  <LinkAnchor
                                    data-testid="swapshift"
                                    href="/swapshift"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="swapshift"
                                      href="/swapshift"
                                      onClick={[Function]}
                                    >
                                      Swap Requests
                                    </a>
                                  </LinkAnchor>
                                </Link>
                              </Router>
                            </BrowserRouter>
                          </div>
                        </ForwardRef>
                      </Nav>
                      <Nav
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <Button
                              active={false}
                              data-testid="logout"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                              variant="outline-info"
                            >
                              <button
                                className="btn btn-outline-info"
                                data-testid="logout"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Logout
                              </button>
                            </Button>
                          </div>
                        </ForwardRef>
                      </Nav>
                    </div>
                  </Transition>
                </Collapse>
              </NavbarCollapse>
            </nav>
          </Navbar>
        </Navigationbar>
      </withRouter(Navigationbar)>
      <styled.div>
        <div
          className="sc-AxiKw gA-drMl"
        >
          <styled.h1>
            <h1
              className="sc-AxhCb jQvLNr"
            >
              Swap Shift with following
            </h1>
          </styled.h1>
          <RenderTable
            allSelectedUsers={[Function]}
            list={
              Array [
                Object {
                  "id": 1,
                  "role": "developer",
                  "taskId": Array [
                    "dsbcsbh",
                  ],
                  "username": "usman",
                },
              ]
            }
            submittedSelectedUsers={[Function]}
          >
            <ForwardRef
              bordered={true}
              hover={true}
              striped={true}
            >
              <table
                className="table table-striped table-bordered table-hover"
              >
                <thead>
                  <tr>
                    <td>
                      ID
                    </td>
                    <td>
                      Email
                    </td>
                    <td>
                      Role
                    </td>
                    <td>
                      Task
                    </td>
                    <td>
                      Select
                    </td>
                  </tr>
                </thead>
                <tbody>
                  <RenderRow
                    allSelectedUsers={[Function]}
                    list={
                      Object {
                        "id": 1,
                        "role": "developer",
                        "taskId": Array [
                          "dsbcsbh",
                        ],
                        "username": "usman",
                      }
                    }
                  >
                    <tr>
                      <td />
                      <td />
                      <td>
                        developer
                      </td>
                      <td>
                        Task
                      </td>
                      <td>
                        <FormCheck
                          disabled={false}
                          id="swap"
                          inline={false}
                          isInvalid={false}
                          isValid={false}
                          onChange={[Function]}
                          title=""
                          type="checkbox"
                        >
                          <div
                            className="form-check"
                          >
                            <FormCheckInput
                              as="input"
                              disabled={false}
                              isInvalid={false}
                              isStatic={true}
                              isValid={false}
                              onChange={[Function]}
                              type="checkbox"
                            >
                              <input
                                className="form-check-input position-static"
                                disabled={false}
                                id="swap"
                                onChange={[Function]}
                                type="checkbox"
                              />
                            </FormCheckInput>
                          </div>
                        </FormCheck>
                      </td>
                    </tr>
                  </RenderRow>
                </tbody>
              </table>
            </ForwardRef>
            <FormGroup>
              <div
                className="form-group"
              >
                <Button
                  active={false}
                  data-testid="submitbutton"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                  variant="primary"
                >
                  <button
                    className="btn btn-primary"
                    data-testid="submitbutton"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    Submit
                  </button>
                </Button>
              </div>
            </FormGroup>
          </RenderTable>
        </div>
      </styled.div>
    </MatchUsers>
  </Router>
</MemoryRouter>
`;

exports[`<MatchUsers /> Component mounting the component(for unauthorize user) 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "rksbm6",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "rksbm6",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MatchUsers
      location={
        Object {
          "state": Object {
            "day": "Monday",
            "swap": Array [
              Object {
                "id": 1,
                "role": "developer",
                "taskId": Array [
                  "dsbcsbh",
                ],
                "username": "usman",
              },
            ],
          },
        }
      }
      role="manager"
    >
      <NotFound
        message="Not Found..."
        role="manager"
      >
        <withRouter(Navigationbar)
          role="manager"
        >
          <Navigationbar
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "key": "rksbm6",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "rksbm6",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "key": "rksbm6",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            role="manager"
          >
            <Navbar
              bg="light"
              collapseOnSelect={false}
              expand="lg"
              variant="light"
            >
              <nav
                className="navbar navbar-expand-lg navbar-light bg-light"
              >
                <NavbarBrand
                  onClick={[Function]}
                >
                  <span
                    className="navbar-brand"
                    onClick={[Function]}
                  >
                    Employee Management System
                  </span>
                </NavbarBrand>
                <NavbarToggle
                  aria-controls="basic-navbar-nav"
                  label="Toggle navigation"
                >
                  <button
                    aria-controls="basic-navbar-nav"
                    aria-label="Toggle navigation"
                    className="navbar-toggler collapsed"
                    onClick={[Function]}
                    type="button"
                  >
                    <span
                      className="navbar-toggler-icon"
                    />
                  </button>
                </NavbarToggle>
                <NavbarCollapse
                  id="basic-navbar-nav"
                >
                  <Collapse
                    appear={false}
                    dimension="height"
                    getDimensionValue={[Function]}
                    id="basic-navbar-nav"
                    in={false}
                    mountOnEnter={false}
                    timeout={300}
                    unmountOnExit={false}
                  >
                    <Transition
                      addEndListener={[Function]}
                      appear={false}
                      aria-expanded={null}
                      enter={true}
                      exit={true}
                      id="basic-navbar-nav"
                      in={false}
                      mountOnEnter={false}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={300}
                      unmountOnExit={false}
                    >
                      <div
                        aria-expanded={null}
                        className="navbar-collapse collapse"
                        id="basic-navbar-nav"
                      >
                        <Nav
                          className="mr-auto"
                          fill={false}
                          justify={false}
                        >
                          <ForwardRef
                            as="div"
                            className="mr-auto navbar-nav"
                            onSelect={[Function]}
                          >
                            <div
                              className="mr-auto navbar-nav"
                              onKeyDown={[Function]}
                            >
                              <BrowserRouter>
                                <Router
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "createHref": [Function],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "blank",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                >
                                  <Link
                                    data-testid="createprofile"
                                    onClick={[Function]}
                                    to="/createprofile"
                                  >
                                    <LinkAnchor
                                      data-testid="createprofile"
                                      href="/createprofile"
                                      navigate={[Function]}
                                      onClick={[Function]}
                                    >
                                      <a
                                        data-testid="createprofile"
                                        href="/createprofile"
                                        onClick={[Function]}
                                      >
                                        Add Developer
                                      </a>
                                    </LinkAnchor>
                                  </Link>
                                  <Link
                                    data-testid="alldevelopers"
                                    onClick={[Function]}
                                    to="/alldevelopers"
                                  >
                                    <LinkAnchor
                                      data-testid="alldevelopers"
                                      href="/alldevelopers"
                                      navigate={[Function]}
                                      onClick={[Function]}
                                    >
                                      <a
                                        data-testid="alldevelopers"
                                        href="/alldevelopers"
                                        onClick={[Function]}
                                      >
                                        All Developer
                                      </a>
                                    </LinkAnchor>
                                  </Link>
                                </Router>
                              </BrowserRouter>
                            </div>
                          </ForwardRef>
                        </Nav>
                        <Nav
                          fill={false}
                          justify={false}
                        >
                          <ForwardRef
                            as="div"
                            className="navbar-nav"
                            onSelect={[Function]}
                          >
                            <div
                              className="navbar-nav"
                              onKeyDown={[Function]}
                            >
                              <Button
                                active={false}
                                data-testid="logout"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="outline-info"
                              >
                                <button
                                  className="btn btn-outline-info"
                                  data-testid="logout"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Logout
                                </button>
                              </Button>
                            </div>
                          </ForwardRef>
                        </Nav>
                      </div>
                    </Transition>
                  </Collapse>
                </NavbarCollapse>
              </nav>
            </Navbar>
          </Navigationbar>
        </withRouter(Navigationbar)>
        <styled.div>
          <div
            className="sc-AxjAm bcThxe"
          >
            <styled.h1>
              <h1
                className="sc-AxirZ kHuMvb"
              >
                Not Found...
              </h1>
            </styled.h1>
          </div>
        </styled.div>
      </NotFound>
    </MatchUsers>
  </Router>
</MemoryRouter>
`;

exports[`<MatchUsers /> Component simulating the submit button 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "qb14y3",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "qb14y3",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MatchUsers
      location={
        Object {
          "state": Object {
            "day": "Monday",
            "swap": Array [
              Object {
                "id": 1,
                "role": "developer",
                "taskId": Array [
                  "dsbcsbh",
                ],
                "username": "usman",
              },
            ],
          },
        }
      }
      role="developer"
    >
      <withRouter(Navigationbar)
        role="developer"
      >
        <Navigationbar
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "key": "qb14y3",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "key": "qb14y3",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "key": "qb14y3",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          role="developer"
        >
          <Navbar
            bg="light"
            collapseOnSelect={false}
            expand="lg"
            fluid={true}
            inverse={true}
            variant="light"
          >
            <nav
              className="navbar navbar-expand-lg navbar-light bg-light"
              fluid={true}
              inverse={true}
            >
              <NavbarBrand
                onClick={[Function]}
              >
                <span
                  className="navbar-brand"
                  onClick={[Function]}
                >
                  Employee Management System
                </span>
              </NavbarBrand>
              <NavbarToggle
                aria-controls="basic-navbar-nav"
                label="Toggle navigation"
              >
                <button
                  aria-controls="basic-navbar-nav"
                  aria-label="Toggle navigation"
                  className="navbar-toggler collapsed"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    className="navbar-toggler-icon"
                  />
                </button>
              </NavbarToggle>
              <NavbarCollapse
                id="basic-navbar-nav"
              >
                <Collapse
                  appear={false}
                  dimension="height"
                  getDimensionValue={[Function]}
                  id="basic-navbar-nav"
                  in={false}
                  mountOnEnter={false}
                  timeout={300}
                  unmountOnExit={false}
                >
                  <Transition
                    addEndListener={[Function]}
                    appear={false}
                    aria-expanded={null}
                    enter={true}
                    exit={true}
                    id="basic-navbar-nav"
                    in={false}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={300}
                    unmountOnExit={false}
                  >
                    <div
                      aria-expanded={null}
                      className="navbar-collapse collapse"
                      id="basic-navbar-nav"
                    >
                      <Nav
                        className="mr-auto"
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="mr-auto navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="mr-auto navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <BrowserRouter>
                              <Router
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "createHref": [Function],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "blank",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                              >
                                <Link
                                  data-testid="tasks"
                                  onClick={[Function]}
                                  to="/tasks"
                                >
                                  <LinkAnchor
                                    data-testid="tasks"
                                    href="/tasks"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="tasks"
                                      href="/tasks"
                                      onClick={[Function]}
                                    >
                                      Tasks
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="timings"
                                  onClick={[Function]}
                                  to="/timings"
                                >
                                  <LinkAnchor
                                    data-testid="timings"
                                    href="/timings"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="timings"
                                      href="/timings"
                                      onClick={[Function]}
                                    >
                                      Timings
                                    </a>
                                  </LinkAnchor>
                                </Link>
                                <Link
                                  data-testid="swapshift"
                                  onClick={[Function]}
                                  to="/swapshift"
                                >
                                  <LinkAnchor
                                    data-testid="swapshift"
                                    href="/swapshift"
                                    navigate={[Function]}
                                    onClick={[Function]}
                                  >
                                    <a
                                      data-testid="swapshift"
                                      href="/swapshift"
                                      onClick={[Function]}
                                    >
                                      Swap Requests
                                    </a>
                                  </LinkAnchor>
                                </Link>
                              </Router>
                            </BrowserRouter>
                          </div>
                        </ForwardRef>
                      </Nav>
                      <Nav
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <Button
                              active={false}
                              data-testid="logout"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                              variant="outline-info"
                            >
                              <button
                                className="btn btn-outline-info"
                                data-testid="logout"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Logout
                              </button>
                            </Button>
                          </div>
                        </ForwardRef>
                      </Nav>
                    </div>
                  </Transition>
                </Collapse>
              </NavbarCollapse>
            </nav>
          </Navbar>
        </Navigationbar>
      </withRouter(Navigationbar)>
      <styled.div>
        <div
          className="sc-AxiKw gA-drMl"
        >
          <styled.h1>
            <h1
              className="sc-AxhCb jQvLNr"
            >
              Swap Shift with following
            </h1>
          </styled.h1>
          <RenderTable
            allSelectedUsers={[Function]}
            list={
              Array [
                Object {
                  "id": 1,
                  "role": "developer",
                  "taskId": Array [
                    "dsbcsbh",
                  ],
                  "username": "usman",
                },
              ]
            }
            submittedSelectedUsers={[Function]}
          >
            <ForwardRef
              bordered={true}
              hover={true}
              striped={true}
            >
              <table
                className="table table-striped table-bordered table-hover"
              >
                <thead>
                  <tr>
                    <td>
                      ID
                    </td>
                    <td>
                      Email
                    </td>
                    <td>
                      Role
                    </td>
                    <td>
                      Task
                    </td>
                    <td>
                      Select
                    </td>
                  </tr>
                </thead>
                <tbody>
                  <RenderRow
                    allSelectedUsers={[Function]}
                    list={
                      Object {
                        "id": 1,
                        "role": "developer",
                        "taskId": Array [
                          "dsbcsbh",
                        ],
                        "username": "usman",
                      }
                    }
                  >
                    <tr>
                      <td />
                      <td />
                      <td>
                        developer
                      </td>
                      <td>
                        Task
                      </td>
                      <td>
                        <FormCheck
                          disabled={false}
                          id="swap"
                          inline={false}
                          isInvalid={false}
                          isValid={false}
                          onChange={[Function]}
                          title=""
                          type="checkbox"
                        >
                          <div
                            className="form-check"
                          >
                            <FormCheckInput
                              as="input"
                              disabled={false}
                              isInvalid={false}
                              isStatic={true}
                              isValid={false}
                              onChange={[Function]}
                              type="checkbox"
                            >
                              <input
                                className="form-check-input position-static"
                                disabled={false}
                                id="swap"
                                onChange={[Function]}
                                type="checkbox"
                              />
                            </FormCheckInput>
                          </div>
                        </FormCheck>
                      </td>
                    </tr>
                  </RenderRow>
                </tbody>
              </table>
            </ForwardRef>
            <FormGroup>
              <div
                className="form-group"
              >
                <Button
                  active={false}
                  data-testid="submitbutton"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                  variant="primary"
                >
                  <button
                    className="btn btn-primary"
                    data-testid="submitbutton"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    Submit
                  </button>
                </Button>
              </div>
            </FormGroup>
          </RenderTable>
        </div>
      </styled.div>
    </MatchUsers>
  </Router>
</MemoryRouter>
`;
